{
  0b0000000000000000 :" "
  0b0010000000000010 :"!"
  0b0010100000000000 :"\""
  0b0000101110010111 :"#"
  0b1110100110010111 :"$"
  0b1010110110110101 :"%"
  0b1001100111011010 :"&"
  0b0000100000000000 :"'"
  0b0000010000001000 :"("
  0b0001000000100000 :")"
  0b0001110110111000 :"*"
  0b0000100110010000 :"+"
  0b0000000000100000 :","
  0b0000000110000000 :"-"
  0b0000000000000010 :"."
  0b0000010000100000 :"/"
  0b1110011001100111 :"0"
  0b0000011000000100 :"1"
  0b1100001111000011 :"2"
  0b1100001110000111 :"3"
  0b0010001110000100 :"4"
  0b1110000100001011 :"5"
  0b1110000111000111 :"6"
  0b1100001000000100 :"7"
  0b1110001111000111 :"8"
  0b1110001110000111 :"9"
  0b0000000100000010 :":"
  0b1000000000100000 :";"
  0b0000010100001000 :"<"
  0b0000000110000011 :"="
  0b0001000010100000 :">"
  0b1100001010010000 :"?"
  0b1100001101010111 :"@"
  0b1110001111000100 :"A"
  0b1100101010010111 :"B"
  0b1110000001000011 :"C"
  0b1100101000010111 :"D"
  0b1110000101000011 :"E"
  0b1110000101000000 :"F"
  0b1110000011000111 :"G"
  0b0010001111000100 :"H"
  0b1100100000010011 :"I"
  0b0000001001000111 :"J"
  0b0010010101001000 :"K"
  0b0010000001000011 :"L"
  0b0011011001000100 :"M"
  0b0011001001001100 :"N"
  0b1110001001000111 :"O"
  0b1110001111000000 :"P"
  0b1110001001001111 :"Q"
  0b1110001111001000 :"R"
  0b1110000110000111 :"S"
  0b1100100000010000 :"T"
  0b0010001001000111 :"U"
  0b0010010001100000 :"V"
  0b0010001001101100 :"W"
  0b0001010000101000 :"X"
  0b0010001110000111 :"Y"
  0b1100010000100011 :"Z"
  0b0100100000010001 :"["
  0b0001000000001000 :"\\"
  0b1000100000010010 :"]"
  0b0000000000101000 :"^"
  0b0000000000000011 :"_"
  0b0001000000000000 :"`"
  0b0000000101010011 :"a"
  0b0010000101010010 :"b"
  0b0000000101000010 :"c"
  0b0000100101010010 :"d"
  0b0000000101100010 :"e"
  0b0100100110010000 :"f"
  0b1010100100010010 :"g"
  0b0010000101010000 :"h"
  0b1000000000010000 :"i"
  0b0000100001010010 :"j"
  0b0000110000011000 :"k"
  0b1000100000010001 :"l"
  0b0000000111010100 :"m"
  0b0000000101010000 :"n"
  0b0000000101010010 :"o"
  0b1010100101000000 :"p"
  0b1010100100010000 :"q"
  0b0000000101000000 :"r"
  0b1010000100010010 :"s"
  0b0010000101000010 :"t"
  0b0000000001010010 :"u"
  0b0000000001100000 :"v"
  0b0000000001101100 :"w"
  0b0001010000101000 :"x"
  0b0010100100010010 :"y"
  0b0000000100100010 :"z"
  0b0100100100010001 :"{"
  0b0000100000010000 :"|"
  0b1000100010010010 :"}"
  0b0000001111000000 :"~"
} :font

(
  symbol render-character
  (str :character ==> str :rendered)
  (
    " $1$1$1 $2$2$2 \n$3$4  $5  $6$7\n$3 $4 $5 $6 $7\n$3  $4$5$6  $7\n $8$8$8 $9$9$9 \n$10  $11$12$13  $14\n$10 $11 $12 $13 $14\n$10$11  $12  $13$14\n $15$15$15 $16$16$16 "
    (0 15) range reverse (1 swap shl font character dget bitand boolean quote (character) (" ") if) map
    interpolate @rendered
  )
) operator

(
  (first size 0 ==)
  (pop ())
  (('first map) keep 'rest map transpose cons)
  if
) ^transpose

(
  "(?<=.)" split
  (render-character "\n" split) map
  transpose (" " join) map "\n" join
) ^render-line

('render-line map "\n\n" join) ^render-lines

(
  ; HACK: the `system` operator doesn't capture stdout, it only returns the exit
  ; code. The `run` operator captures stdout, but actually executes the command
  ; in separate shell, so the `tput columns` might be different. Splitting the
  ; difference, we just use the `system` sigil to exit with the number of
  ; columns from the stdout of `tput`.
  !"exit `tput columns`" :columns
  " " render-character "\n" split 'length map 0 ('< 'nip 'pop if) reduce :character-width
  character-width succ :character-width-with-space
  columns character-width-with-space / floor :characters-per-line
  ".{1,$1}" 'characters-per-line =% search-all flatten render-lines
) ^render-string

(font dkeys "" join render-string puts!) ^ascii-table

"Fuck you Mendez." render-string puts!
